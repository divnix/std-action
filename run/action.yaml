name: "Sandard Action Runner"
description: "Build a target and run its action."

inputs:
  github_pat:
    description: "GitHub token for accessing private repos."
    required: false
    default: ${{ github.token }}
  cache:
    description: "Nix cache to optionally upload artifacts to"
    # auto refers to the local nix store, so nothing is uploaded by default
    default: auto
    required: false
  builder:
    description: "Nix store to build on."
    default: auto
    required: true
  json:
    description: "JSON describing the action, found in the discovery phase."
    required: true
  cached:
    description: "Boolean marking whether to pull discovery artifacts from the Nix cache."
    required: false
  extra_nix_config:
    description: "Configuration to append to the nix.conf."
    required: false

runs:
  using: "composite"
  steps:
    - name: Set Environment
      run: |
        delim=$RANDOM

        cat << $delim >> "$GITHUB_ENV"
        DISC_PATH=${{ runner.temp }}/discovery
        DISC_ARC_PATH=${{ runner.temp }}/discovery.tar.zstd
        BUILDER=${{ inputs.builder }}
        CACHE=${{ inputs.cache }}
        $delim

        echo "JSON<<$delim" >> $GITHUB_ENV
        echo '${{ inputs.json }}' >> $GITHUB_ENV
        echo "$delim" >> $GITHUB_ENV
      shell: bash

    - name: Restore Cache & Discovery Results
      if: inputs.cached != 'true' || inputs.cache == 'auto'
      id: restore-cache
      uses: divnix/nix-cache-action@v3.0.11-nix
      with:
        path: |
          /nix
          ~/.cache/nix
          ~root/.cache/nix
        key: discovery-${{ runner.os }}-${{ runner.arch }}-${{ github.ref }}-${{ github.sha }}

    - name: Install Nix
      uses: cachix/install-nix-action@v18
      with:
        extra_nix_config: |
          accept-flake-config = true
          trusted-users = runner
          access-tokens = github.com=${{ inputs.github_pat }}
          secret-key-files = ${{ env.NIX_KEY_PATH }}
          ${{ inputs.extra_nix_config }}

    - name: Pull Target from Nix Cache
      if: inputs.cached == 'true' && inputs.cache != 'auto'
      run: nix copy --derivation --from ${{ inputs.cache }} ${{ fromJSON(env.JSON).targetDrv }}
      shell: bash

    - name: Build ${{ fromJSON(env.JSON).name }}
      id: build
      run: |
        ${{ github.action_path }}/build.sh
      shell: bash

    - name: ${{ fromJSON(env.JSON).action }} ${{ fromJSON(env.JSON).name }}
      if: fromJSON(env.JSON).action != 'build'
      env:
        BUILT: ${{ steps.build.outputs.uncached }}
      run: |
        ${{ github.action_path }}/run.sh
      shell: bash

    - name: Populate Cache
      env:
        UNCACHED: ${{ steps.build.outputs.uncached }}
      if: always() && env.CACHE != 'auto' && env.NIX_KEY_PATH != '' && env.UNCACHED != '' && steps.build.conclusion == 'success'
      run: |
        ${{ github.action_path }}/cache.sh
      shell: bash
