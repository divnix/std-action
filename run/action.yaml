name: "Standard Action Runner"
description: "Build a target and run its action."
author: "The Standard Authors"

inputs:
  discovery_json:
    description: "JSON describing the action matrix, found in the discovery phase."
    required: true
    default: ${{ toJSON(matrix.target) }}

  ffBuildInstructions:
    required: false
    default: false
    description: |
      Whether to fast forward build instruction (derivations).

      If set to true, the worker will try to ssh to a host alias called
      'discovery' in order to fetch derviation closures from the discovery
      host. Access to that discovery host with alias 'discovery' must be
      provided indendently via SSH configuraiton.

  remoteStore:
    required: false
    default: false
    description: |
      When set, builds are made on this remote store, e.g. inside a build server farm.

      Can be set to any of the values available for the `--store` nix command line flag.
      For example, to connect to nixbuild.net, simply set it to `ssh-ng://eu.nixbuild.net` \*.

      \* If using nixbuild.net, in particular, also make sure to configure their `nixbuild-action`.

runs:
  using: "composite"
  steps:
    - if: contains( runner.os, 'macos')
      name: Install compatible bash 5+
      shell: bash
      run: |
        nix profile install nixpkgs/nixpkgs-22.11-darwin#bash

    - name: Parse Input
      shell: bash
      env:
        json: ${{ inputs.discovery_json }}
      run: |
        declare action target cell block actionDrv
        eval "$(jq -r '@sh "action=\(.action) target=\(.name) cell=\(.cell) block=\(.block) actionDrv=\(.actionDrv)"' <<< "$json" )"
        echo "cell=$cell" >> $GITHUB_ENV
        echo "block=$block" >> $GITHUB_ENV
        echo "target=$target" >> $GITHUB_ENV
        echo "action=$action" >> $GITHUB_ENV
        echo "actionDrv=$actionDrv" >> $GITHUB_ENV

    - uses: actions/cache/restore@v4
      id: cache
      if: inputs.ffBuildInstructions == 'false'
      with:
        path: ${{ runner.temp }}/eval-store
        key: drv-pack-${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}
        fail-on-cache-miss: true

    - name: Setup fake tty
      shell: bash
      run: |
        echo "TERM=xterm-256color" >> $GITHUB_ENV
        nix --quiet profile install nixpkgs#faketty

    - name: Execute on ${{ env.target }}
      id: build
      run: ${{ github.action_path }}/execute.sh
      shell: bash
      env:
        EVALSTORE_IMPORT: ${{ runner.temp }}/eval-store
        DRV_IMPORT_FROM_DISCOVERY: ${{ inputs.ffBuildInstructions }}
        REMOTE_STORE: ${{ inputs.remoteStore }}

        # prj-spec <https://github.com/numtide/prj-spec>
        PRJ_ROOT: ${{ github.workspace }}
        PRJ_DATA_HOME: ${{ runner.temp }}/.data
        PRJ_CACHE_HOME: ${{ runner.temp }}/.cache
        PRJ_CONFIG_HOME: ${{ runner.temp }}/.config
        PRJ_RUNTIME_DIR: ${{ runner.temp }}/.run
        PRJ_PATH: ${{ runner.temp }}/.bin
