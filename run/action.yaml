name: "Sandard Action Runner"
description: "Build a target and run its action."

inputs:
  key_path:
    description: "The path to place the Nix secret key."
    required: false
    default: "${{ runner.temp }}/.nix-key"
  github_pat:
    description: "GitHub token for accessing private repos."
    required: false
    default: ${{ github.token }}
  nix_key:
    description: "Secret key used for Nix package signing."
    required: false
  cache:
    description: "Nix cache to optionally upload artifacts to"
    # auto refers to the local nix store, so nothing is uploaded by default
    default: auto
    required: false
  builder:
    description: "Nix store to build on."
    default: auto
    required: true
  json:
    description: "JSON describing the action, found in the discovery phase."
    required: true
  nix_ssh_key:
    description: "SSH private key to send builds to a remote Nix builder."
    default: none
    required: false
  ssh_known_hosts:
    description: "SSH known host keys for Nix builders"
    default: none
    required: false
  extra_nix_config:
    description: "Configuration to append to the nix.conf."
    required: false
  discovery_ssh:
    description: "Nix store URI for a dedicated discovery machine."
    default: none
    required: false

runs:
  using: "composite"
  steps:

    - name: Emplace Secret Key
      if: inputs.nix_key != ''
      shell: bash
      env:
        NIX_KEY_PATH: ${{ inputs.key_path }}
        NIX_SECRET_KEY: ${{ inputs.nix_key }}
      run: |
        echo "::group::Make Nix secret key."
        echo "$NIX_SECRET_KEY" >"$NIX_KEY_PATH"
        chmod 0600 "$NIX_KEY_PATH"
        echo "::endgroup::"


    - name: Setup SSH Keys
      if: inputs.nix_ssh_key != 'none'
      env:
        SSH_AUTH_SOCK: ${{ runner.temp }}/ssh_agent.sock
        NIX_SSH_KEY: ${{ inputs.nix_ssh_key }}
      run: |
        ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null
        ssh-add - <<< "$NIX_SSH_KEY"
      shell: bash

    - name: Setup SSH Known Hosts
      if: inputs.nix_ssh_key != 'none' && inputs.ssh_known_hosts != 'none'
      env:
        SSH_KNOWN_HOSTS: ${{ inputs.ssh_known_hosts }}
      run: |
        sudo sh -c 'echo "$SSH_KNOWN_HOSTS" >> /etc/ssh/ssh_known_hosts'
        sudo chmod 0644 /etc/ssh/ssh_known_hosts
      shell: bash

    - name: Restore Cache & Discovery Results
      id: restore-cache
      if: inputs.discovery_ssh == 'none'
      uses: divnix/nix-cache-action@v3.0.11-nix
      with:
        path: |
          /nix
          ~/.cache/nix
          ~root/.cache/nix
        key: discovery-${{ runner.os }}-${{ runner.arch }}-${{ github.ref }}-${{ github.sha }}

    - name: Install Nix
      uses: nixbuild/nix-quick-install-action@v19
      with:
        nix_conf: |
          experimental-features = nix-command flakes
          accept-flake-config = true
          trusted-users = runner
          access-tokens = github.com=${{ inputs.github_pat }}
          secret-key-files = ${{ env.NIX_KEY_PATH }}
          ${{ inputs.extra_nix_config }}

    - name: Pull Derivations from Discovery Runner
      if: inputs.discovery_ssh != 'none'
      env:
        DISCOVERY_SSH: ${{ inputs.discovery_ssh }}
      run: |
        ssh "$DISCOVERY_SSH" -- \
          'nix-store --export \
            $(nix-store --query --requisites \
              ${{ fromJSON(inputs.json).targetDrv }} ${{ fromJSON(inputs.json).actionDrv }}) \
          | zstd' \
        | unzstd \
        | nix-store --import &>/dev/null
      shell: bash

    - name: Build ${{ fromJSON(inputs.json).name }}
      id: build
      env:
        BUILDER: ${{ inputs.builder }}
      run: |
        delim=$RANDOM
        echo "JSON<<$delim" >> $GITHUB_ENV
        echo '${{ inputs.json }}' >> $GITHUB_ENV
        echo "$delim" >> $GITHUB_ENV
        ${{ github.action_path }}/build.sh
      shell: bash

    - name: ${{ fromJSON(inputs.json).action }} ${{ fromJSON(inputs.json).name }}
      if: fromJSON(inputs.json).action != 'build'
      env:
        BUILT: ${{ steps.build.outputs.uncached }}
        BUILDER: ${{ inputs.builder }}
      run: |
        delim=$RANDOM
        echo "JSON<<$delim" >> $GITHUB_ENV
        echo '${{ inputs.json }}' >> $GITHUB_ENV
        echo "$delim" >> $GITHUB_ENV
        ${{ github.action_path }}/run.sh
      shell: bash

    - name: Populate Cache
      env:
        CACHE: ${{ inputs.cache }}
        BUILDER: ${{ inputs.builder }}
        UNCACHED: ${{ steps.build.outputs.uncached }}
        NIX_KEY_PATH: ${{ inputs.key_path }}
      if: always() && env.CACHE != 'auto' && inputs.nix_key != '' && env.UNCACHED != '' && steps.build.conclusion == 'success'
      run: |
        ${{ github.action_path }}/cache.sh
      shell: bash
